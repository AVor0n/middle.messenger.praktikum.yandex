{
  "extends": [
    "airbnb-base",
    "airbnb-typescript/base",
    "plugin:regexp/all",
    "plugin:import/recommended",
    "plugin:promise/recommended",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:@typescript-eslint/strict-type-checked",
    "eslint-config-prettier"
  ],
  "plugins": ["@typescript-eslint", "promise", "regexp", "import"],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "tsconfig.eslint.json"
      }
    }
  },
  "root": true,
  "env": {
    "browser": true,
    "es2022": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.eslint.json",
    "ecmaFeatures": {
      "regexUFlag": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "ignorePatterns": ["dist/*"],
  "rules": {
    "no-use-before-define": "off", // требуется для включения "@typescript-eslint/no-use-before-define"
    "no-restricted-syntax": "off", // airbnb запрещает for..of
    "class-methods-use-this": "off", // слишком много ошибок, видимо я не умею использовать классы
    "no-underscore-dangle": "off", // бесполезно, применяю только если нужно
    "no-param-reassign": "warn",
    "no-console": "error",
    "@typescript-eslint/no-empty-interface": "off", // бесполезно, применяю только если нужно
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/consistent-type-imports": ["warn", { "fixStyle": "inline-type-imports" }],
    "@typescript-eslint/no-use-before-define": ["error", { "functions": false }],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-confusing-void-expression": ["error", { "ignoreArrowShorthand": true }],
    "regexp/no-obscure-range": "off", // ругается на а-я, как на неочевидный диапазон
    "promise/always-return": ["error", { "ignoreLastCallback": true }],
    "promise/catch-or-return": ["error", { "allowFinally": true }],
    "import/prefer-default-export": "off",
    "import/no-duplicates": ["error", { "prefer-inline": true }],
    "import/order": [
      "error",
      {
        "groups": ["external", "builtin", "index", "sibling", "parent", "internal", "type"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "pathGroups": [
          {
            "pattern": "@shared/*",
            "group": "external",
            "position": "after"
          }
        ],
        "newlines-between": "never"
      }
    ]
  },
  "overrides": [
    {
      "files": ["./*.ts"],
      "rules": {
        "import/no-extraneous-dependencies": "off" // .ts в корне - node-файлы, которые могут иметь свои зависимости
      }
    },
    {
      "files": ["./**/*.test.ts", "./**/*.test.tsx"],
      "extends": ["plugin:mocha/recommended", "plugin:chai-expect/recommended"],
      "plugins": ["mocha", "chai-expect"],
      "rules": {
        "mocha/no-mocha-arrows": "off", // привык к стрелочным функциям, доступ к контексту mocha не нужен (пока)
        "import/extensions": ["error", "always"], // без указания расширения ts-node не может зарезолвить файлы
        "import/no-extraneous-dependencies": "off", // тесты могут иметь свои зависимости
        "@typescript-eslint/no-unused-expressions": "off", // у sinon такое api, что без этого никак
        "max-classes-per-file": "off", // нужно для создания моков
        "@typescript-eslint/no-non-null-assertion": "warn"
      }
    }
  ]
}
